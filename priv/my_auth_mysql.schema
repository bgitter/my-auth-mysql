%%-*- mode: erlang -*-
%% my_auth_mysql config mapping
{mapping, "auth.mysql.server", "my_auth_mysql.server", [
  {default, {"127.0.0.1", 3306}},
  {datatype, [integer, ip, string]}
]}.

{mapping, "auth.mysql.pool", "my_auth_mysql.server", [
  {default, 8},
  {datatype, integer}
]}.

{mapping, "auth.mysql.username", "my_auth_mysql.server", [
  {default, ""},
  {datatype, string}
]}.

{mapping, "auth.mysql.password", "my_auth_mysql.server", [
  {default, ""},
  {datatype, string}
]}.

{mapping, "auth.mysql.database", "my_auth_mysql.server", [
  {default, "mqtt"},
  {datatype, string}
]}.

{mapping, "auth.mysql.query_timeout", "my_auth_mysql.server", [
  {default, ""},
  {datatype, string}
]}.

{translation, "my_auth_mysql.server", fun(Conf) ->
  io:format("转换Mysql配置~n"),
  {MyHost, MyPort} =
  case cuttlefish:conf_get("auth.mysql.server", Conf) of
    {Ip, Port} -> {Ip, Port};
    S          -> case string:tokens(S, ":") of
                    [Domain]        -> {Domain, 3306};
                    [Domain, Port]  -> {Domain, list_to_integer(Port)}
                  end
    end,
  Pool = cuttlefish:conf_get("auth.mysql.pool", Conf),
  Username = cuttlefish:conf_get("auth.mysql.username", Conf),
  Password = cuttlefish:conf_get("auth.mysql.password", Conf),
  DB = cuttlefish:conf_get("auth.mysql.database", Conf),
  Timeout = case cuttlefish:conf_get("auth.mysql.query_timeout", Conf) of
                ""          -> infinity;
                Duration    ->
                    case cuttlefish_duration:parse(Duration, ms) of
                        {error, Reason} -> error(Reason);
                        Ms when is_integer(Ms) -> Ms
                    end
            end,
  [{pool_size, Pool},
   {auto_reconnect, 1},
   {host, MyHost},
   {port, MyPort},
   {user, Username},
   {password, Password},
   {database, DB},
   {encoding, utf8},
   {query_timeout, Timeout},
   {keep_alive, true}]
end}.


{mapping, "auth.mysql.auth_query", "my_auth_mysql.auth_query", [
  {datatype, string}
]}.

{mapping, "auth.mysql.password_hash", "my_auth_mysql.password_hash", [
  {datatype, string}
]}.

{mapping, "auth.mysql.super_query", "my_auth_mysql.super_query", [
  {datatype, string}
]}.

{mapping, "auth.mysql.acl_query", "my_auth_mysql.acl_query", [
  {datatype, string}
]}.

{translation, "my_auth_mysql.password_hash", fun(Conf) ->
  io:format("转换密码处理~n"),
  HashValue = cuttlefish:conf_get("auth.mysql.password_hash", Conf),
    case string:tokens(HashValue, ",") of
        [Hash]                              -> list_to_atom(Hash);
        [Prefix, Suffix]                    -> {list_to_atom(Prefix), list_to_atom(Suffix)};
        [Hash, MacFun, Iterations, Dklen]   -> {list_to_atom(Hash), list_to_atom(MacFun), list_to_integer(Iterations), list_to_integer(Dklen)};
        _                                   -> plain
    end
end}.